#!/usr/bin/python

DOCUMENTATION = '''
---
module: db2_instance
short_description: Creates a db2 instance
description:
  - Creates a db2 instance.

author: Yoram Hekma
requirements:
  - python > 2.6

options:
  name:
    description:
      - The name of the instance to be modified/created
    required: true
    default: null
  ensure:
    description:
      - Whether the instance should be created or removed
    required: null
    default: present
  db2path:
    description:
      - The path to db2 (ie. /opt/IBM/db2/V97)
    required: true
    default: null
  port:
    description:
      - Network port to be used
    required: false
    default: null
  security:
    description:
      - Type of security to be used
    required: false
    default: ese
  fenceuser:
    description:
      - User to be used for fencing. Must be present on system.
    required: true
    default: null
'''

EXAMPLES = '''
- action: db2_instance name=wasdb db2path=/opt/IBM/db2/V97 port=9090 fencuser=wasdb_fence
'''


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            db2path=dict(required=True),
            port=dict(required=False, default=""),
            security=dict(required=False, default="ese"),
            fenceuser=dict(required=True),
            ensure=dict(required=False, default="present"),
        )
    )

    name = module.params['name']
    db2path = module.params['db2path']
    portnum = module.params['port']
    security = module.params['security']
    fenceuser = module.params['fenceuser']
    ensure = module.params['ensure']

    if portnum:
        port = "-p %s" % portnum
    else:
        port = portnum
    
    if ensure == "absent":
        command = "%s/instance/db2idrop %s" % (db2path, name)
    else:
        command = "%s/instance/db2icrt -a SERVER_ENCRYPT %s -s %s -u %s %s" % (db2path, port, security, fenceuser, name)
    rc, out, err = module.run_command(command)

    if not rc == 0:
        module.fail_json(msg="Command failed. Executed command was:\n%s" % command)

    res_args = {
        'stdout': out,
        'stderr': err,
        'rc': rc,
        'changed': True,
    }

    module.exit_json(**res_args)


from ansible.module_utils.basic import * # NOQA
main()
